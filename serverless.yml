service: International-Parcel-Tracking
app: Serverless-International-Parcel-Tracking
# org: your-org-name
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  logs:
    restApi:
      level: INFO
      fullExecutionData: true
  
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}

  memorySize: 512
  timeout: 3

  environment:
    RECIPIENTS_TABLE: Recipients-${self:provider.stage}
    RECIPIENTS_MOBILE_INDEX: RecipientsMobileIndex
    LOGISTICS_TABLE: Logistics-${self:provider.stage}

  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatementsName: ${self:custom.APP_NAME}-commonIamRole-${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"

custom:
  APP_NAME: parcel-tracking-webapp
  AUTH_USER_POOL_CLIENT_NAME: ParcelTrackingWebApp
  AUTH_PREFIX_DOMAIN: parceltracking
  AUTH_CALLBACK_URL: http://localhost:3000/callback

  serverless-offline:
    httpPort: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      RecipientsTable:
        sources:
          - table: ${self:provider.environment.RECIPIENTS_TABLE}
            sources: [./test/seed/RecipientsTable.json]

  documentation:
    api:
      info:
        version: v1.0.0
        title: Recipients-Parcels-Management-APIs
        description: Serverless recipients and parcels management application
    models:
      - name: CreateRecipientRequest
        contentType: application/json
        description: the request of creating a new recipient
        schema: ${file(src/requests/createRecipientRequest.json)}

functions:
  GetAllRecipients:
    handler: src/lambda/http/getAllRecipients.handler
    events:
      - http:
          method: get
          path: recipients
          cors: true
          authorizer:
            type: cognito_user_pools
            authorizerId:
              Ref: ParcelTrackingApiGatewayAuthorizer
            # scopes:
            #   - openid
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:custom.APP_NAME}-GetAllRecipients-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPIENTS_TABLE}

  CreateRecipient:
    handler: src/lambda/http/createRecipient.handler
    events:
      - http:
          method: post
          path: recipients
          cors: true
          request:
            parameters:
              querystrings:
                userId: true
          documentation:
            requestModels:
              'application/json': CreateRecipientRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:custom.APP_NAME}-CreateRecipient-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPIENTS_TABLE}

  GetRecipient:
    handler: src/lambda/http/getRecipient.handler
    events:
      - http:
          method: get
          path: recipients/id/{recipientId}
          cors: true
          request:
            parameters:
              paths:
                recipientId: true
          authorizer:
            type: cognito_user_pools
            authorizerId:
              Ref: ParcelTrackingApiGatewayAuthorizer
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:custom.APP_NAME}-GetRecipient-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPIENTS_TABLE}

  UpdateRecipient:
    handler: src/lambda/http/updateRecipient.handler
    events:
      - http:
          method: patch
          path: recipients/id/{recipientId}
          cors: true
          request:
            parameters:
              paths:
                recipientId: true
          authorizer:
            type: cognito_user_pools
            authorizerId:
              Ref: ParcelTrackingApiGatewayAuthorizer
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:custom.APP_NAME}-UpdateRecipient-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPIENTS_TABLE}

  DeleteRecipient:
    handler: src/lambda/http/deleteRecipient.handler
    events:
      - http:
          method: delete
          path: recipients/id/{recipientId}
          cors: true
          request:
            parameters:
              paths:
                recipientId: true
          authorizer:
            type: cognito_user_pools
            authorizerId:
              Ref: ParcelTrackingApiGatewayAuthorizer
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:custom.APP_NAME}-DeleteRecipient-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPIENTS_TABLE}

resources:
  Resources:
    RecipientsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: recipientId
            AttributeType: S
          - AttributeName: mobile
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: recipientId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECIPIENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.RECIPIENTS_MOBILE_INDEX}
            KeySchema:
            - AttributeName: mobile
              KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes: 
                - "fullname"
                - "parcels"

    ParcelTrackingCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ParcelTracking
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        AccountRecoverySetting: 
          RecoveryMechanisms:
            - Name: verified_email 
              Priority: 1
        Policies: 
            PasswordPolicy:
              MinimumLength: 8
              RequireLowercase: true
              RequireNumbers: true
              RequireSymbols: false
              RequireUppercase: true
              TemporaryPasswordValidityDays: 1
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true

    ParcelTrackingCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.AUTH_USER_POOL_CLIENT_NAME}
        GenerateSecret: false
        UserPoolId:
          Ref: ParcelTrackingCognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        CallbackURLs:
          - ${self:custom.AUTH_CALLBACK_URL}
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          # - aws.cognito.signin.user.admin
        SupportedIdentityProviders:
          - COGNITO

    ParcelTrackingCognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties: 
        Domain: ${self:custom.AUTH_PREFIX_DOMAIN}
        UserPoolId:
          Ref: ParcelTrackingCognitoUserPool

    ParcelTrackingApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPoolAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ ParcelTrackingCognitoUserPool, Arn ]
        IdentitySource: method.request.header.Authorization

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: Request-Body-Validator
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

  Outputs:
    CognitoUserPoolId:
      Description: Cognito User Pool ID
      Value:
        Ref: ParcelTrackingCognitoUserPool

    CognitoUserPoolClientId:
      Description: Cognito User Pool Client ID
      Value:
        Ref: ParcelTrackingCognitoUserPoolClient

    CognitoUserPoolDomain:
      Description: Cognito AUTH Domain Name
      Value:
        Fn::Join:
          - ''
          -
            - https://
            - Ref: ParcelTrackingCognitoUserPoolDomain
            - .auth.
            - ${self:provider.region}
            - .amazoncognito.com

    CognitoUserPoolClientHostedUI:
      Description: Cognito User Pool Client Host UI URL
      Value:
        Fn::Join:
          - ''
          -
            - https://
            - Ref: ParcelTrackingCognitoUserPoolDomain
            - .auth.
            - ${self:provider.region}
            - .amazoncognito.com
            - /login?
            - client_id=
            - Fn::Join:
              - '&'
              -
                - !Ref ParcelTrackingCognitoUserPoolClient
                - response_type=code
                - scope=openid
                - redirect_uri=${self:custom.AUTH_CALLBACK_URL}



            # - Ref: CognitoUserPoolDomain
            # - /login?
            # - client_id=
            # - end
            # - !Ref CognitoUserPoolClientId
            # - &response_type=code
            # - &scope=openid
            # - &redirect_uri=
            # - ${self:custom.AUTH_CALLBACK_URL}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
