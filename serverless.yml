service: serverless-recipients-parcels-management
app: serverless-recipients-parcels-management
# org: your-org-name
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}

  environment:
    APP_NAME: Serverless-Rcpt-Pcl-Mgr
    RECIPIENTS_TABLE: Recipients-${self:provider.stage}
    RECIPIENTS_MOBILE_INDEX: RecipientsMobileIndex
    LOGISTICS_TABLE: Logistics-${self:provider.stage}

custom:
  serverless-offline:
    httpPort: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      RecipientsTable:
        sources:
          - table: ${self:provider.environment.RECIPIENTS_TABLE}
            sources: [./test/seed/RecipientsTable.json]

  documentation:
    api:
      info:
        version: v1.0.0
        title: Recipients-Parcels-Management-APIs
        description: Serverless recipients and parcels management application

functions:
  hello:
    handler: handler.hello

resources:
  Resources:
    RecipientsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: recipientId
            AttributeType: S
          - AttributeName: mobile
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: recipientId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECIPIENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.RECIPIENTS_MOBILE_INDEX}
            KeySchema:
            - AttributeName: mobile
              KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes: 
                - "fullname"
                - "parcels"

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
